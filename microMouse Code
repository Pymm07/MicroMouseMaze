class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

    # Insert Node
    def insert(self, data):
        if data < self.data:
            if self.left is None:
                self.left = Node(data)
            else:
                self.left.insert(data)
        elif data > self.data:
            if self.right is None:
                self.right = Node(data)
            else:
                self.right.insert(data)
        # If data == self.data, do nothing (no duplicates)

    # In-order Traversal (Left, Root, Right)
    def PrintTree(self):
        if self.left:
            self.left.PrintTree()
        print(self.data)
        if self.right:
            self.right.PrintTree()

    # Post-order Traversal (Left, Right, Root)
    def PostorderTraversal(self):
        res = []
        if self.left:
            res += self.left.PostorderTraversal()
        if self.right:
            res += self.right.PostorderTraversal()
        res.append(self.data)
        return res

# Create the tree and insert nodes
root = Node(27)
root.insert(14)
root.insert(35)
root.insert(10)
root.insert(19)
root.insert(31)
root.insert(42)

print("In-order Traversal:")
root.PrintTree()

print("\nPost-order Traversal:")
print(root.PostorderTraversal())
